@model ProductModel

@{
    ViewData["Title"] = Model.ProductID == 0 ? "Add Product" : "Edit Product";
}

<style>
    .prod-form-header {
        background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(21, 128, 61, 0.35);
    }
    
    .prod-form-card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        background: white;
    }
    
    .prod-form-header-card {
        background: linear-gradient(135deg, #198754 0%, #157347 100%);
        color: white;
        padding: 1.5rem;
        border: none;
    }
    
    .prod-form-body {
        padding: 2rem;
    }
    
    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .form-control, .form-select {
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #16a34a;
        box-shadow: 0 0 0 0.2rem rgba(22, 163, 74, 0.25);
    }
    
    .form-control.is-valid, .form-select.is-valid {
        border-color: #28a745;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='m2.3 6.73.94-.94 1.88 1.88 3.75-3.75.94.94L4.12 10.5z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .form-control.is-invalid, .form-select.is-invalid {
        border-color: #dc3545;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.8 4.6 1.4 1.4 1.4-1.4'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .btn-cancel {
        background: #6c757d;
        border: none;
        color: white;
        padding: 0.75rem 2rem;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .btn-cancel:hover {
        background: #5a6268;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(108, 117, 125, 0.4);
        text-decoration: none;
    }
    
    .btn-submit {
        background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
        border: none;
        color: white;
        padding: 0.75rem 2rem;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .btn-submit:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(21, 128, 61, 0.35);
        color: white;
    }
    
    .form-text {
        color: #6c757d;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .validation-summary {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border: 1px solid #f5c6cb;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .back-btn {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        padding: 0.5rem 1.5rem;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .back-btn:hover {
        background: rgba(255, 255, 255, 0.3);
        color: white;
        transform: translateY(-2px);
        text-decoration: none;
    }
    
    .info-alert {
        background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
        border: 1px solid #bee5eb;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .input-group-text {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-right: none;
        color: #6c757d;
        font-weight: 600;
    }
    
    .input-group .form-control {
        border-left: none;
    }
    
    .input-group .form-control:focus {
        border-left: none;
    }
</style>

<div class="prod-form-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="mb-2">
                <i class="fas @(Model.ProductID == 0 ? "fa-plus-square" : "fa-box-open") me-2"></i>
                @ViewData["Title"]
            </h1>
            <p class="mb-0 opacity-75">@(Model.ProductID == 0 ? "Add a new product to your inventory" : "Update product information and stock levels")</p>
        </div>
        <a asp-action="ProductList" asp-controller="Product" class="back-btn">
            <i class="fas fa-arrow-left"></i> Back to List
        </a>
    </div>
</div>

<div class="row justify-content-center">
    <div class="col-lg-8">
        <div class="prod-form-card">
            <div class="prod-form-header-card">
                <h5 class="mb-0">
                    <i class="fas fa-boxes me-2"></i>Product Information
                </h5>
            </div>
            <div class="prod-form-body">
                <form asp-action="AddEdit" asp-controller="Product" method="post">
                    @Html.ValidationSummary(true, "", new { @class = "validation-summary" })

                    <input type="hidden" asp-for="ProductID" />

                    <div class="row">
                        <div class="col-md-8 mb-4">
                            <label asp-for="ProductName" class="form-label">
                                <i class="fas fa-shopping-bag text-primary"></i>Product Name
                            </label>
                            <input asp-for="ProductName" class="form-control" placeholder="Enter product name (e.g., Fresh Apple Juice)" />
                            <span asp-validation-for="ProductName" class="text-danger small"></span>
                            <div class="form-text">
                                <i class="fas fa-info-circle text-info"></i>
                                Choose a descriptive name for your product
                            </div>
                        </div>
                        <div class="col-md-4 mb-4">
                            <label asp-for="CategoryID" class="form-label">
                                <i class="fas fa-tag text-primary"></i>Category
                            </label>
                            <select asp-for="CategoryID" class="form-select" asp-items="@(new SelectList(Model.CategoryList, "CategoryID", "CategoryName"))">
                                <option value="">-- Select Category --</option>
                            </select>
                            <span asp-validation-for="CategoryID" class="text-danger small"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 mb-4">
                            <label asp-for="Price" class="form-label">
                                <i class="fas fa-dollar-sign text-primary"></i>Price
                            </label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input asp-for="Price" class="form-control" placeholder="0.00" step="0.01" />
                            </div>
                            <span asp-validation-for="Price" class="text-danger small"></span>
                        </div>
                        <div class="col-md-4 mb-4">
                            <label asp-for="UsedStock" class="form-label">
                                <i class="fas fa-chart-line text-primary"></i>Used Stock
                            </label>
                            <input asp-for="UsedStock" class="form-control" placeholder="0" type="number" min="0" />
                            <span asp-validation-for="UsedStock" class="text-danger small"></span>
                        </div>
                        <div class="col-md-4 mb-4">
                            <label asp-for="RemainingStock" class="form-label">
                                <i class="fas fa-warehouse text-primary"></i>Remaining Stock
                            </label>
                            <input asp-for="RemainingStock" class="form-control" placeholder="0" type="number" min="0" />
                            <span asp-validation-for="RemainingStock" class="text-danger small"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12">
                            <div class="info-alert">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Stock Management:</strong> Keep track of your inventory levels. Used Stock represents items sold or consumed, while Remaining Stock shows available quantity.
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center">
                        <a asp-action="ProductList" asp-controller="Product" class="btn-cancel">
                            <i class="fas fa-times"></i>Cancel
                        </a>
                        <button type="submit" class="btn-submit">
                            <i class="fas @(Model.ProductID == 0 ? "fa-plus" : "fa-save")"></i>
                            @(Model.ProductID == 0 ? "Add Product" : "Update Product")
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const inputs = document.querySelectorAll('input.form-control, select.form-select, textarea.form-control');
            inputs.forEach(function (el) {
                el.addEventListener('blur', function () {
                    const val = (el.value || '').trim();
                    if (val.length === 0) {
                        el.classList.remove('is-valid');
                        el.classList.add('is-invalid');
                    } else {
                        el.classList.remove('is-invalid');
                        el.classList.add('is-valid');
                    }
                });

                el.addEventListener('input', function () {
                    if (el.classList.contains('is-invalid') && (el.value || '').trim().length > 0) {
                        el.classList.remove('is-invalid');
                        el.classList.add('is-valid');
                    }
                });
            });

            // Special validation for price field
            const priceInput = document.querySelector('input[name="Price"]');
            if (priceInput) {
                priceInput.addEventListener('input', function() {
                    const value = parseFloat(this.value);
                    if (value < 0) {
                        this.classList.remove('is-valid');
                        this.classList.add('is-invalid');
                    } else if (value > 0) {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            }

            // Special validation for stock fields
            const stockInputs = document.querySelectorAll('input[name="UsedStock"], input[name="RemainingStock"]');
            stockInputs.forEach(function(input) {
                input.addEventListener('input', function() {
                    const value = parseInt(this.value);
                    if (value < 0) {
                        this.classList.remove('is-valid');
                        this.classList.add('is-invalid');
                    } else if (value >= 0) {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            });
        });
    </script>
}